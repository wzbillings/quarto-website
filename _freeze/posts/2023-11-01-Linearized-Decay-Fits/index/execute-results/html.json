{
  "hash": "9f9636ce0cdc2a07e7ed7de7a0e16168",
  "result": {
    "markdown": "---\ntitle: \"Linear fits for exponential and power law decay models\"\nauthor: \"Zane Billings\"\ndate: \"2023-07-25\"\ndescription: |\n  In a strange confluence of events that I did not expect, a particular fact\n  that I learned in my scientific computing class in undergrad is actually very\n  relevant to a research project in my group. One of my group members is\n  working on a project involving some decay models, and I actually learned\n  about how to fit those as linear models in that class. So let's talk about\n  that, and see whether it adapts to the hierarchical case.\nlicense: \"CC BY-SA\"\ndraft: true\n---\n\n\n\n\n\nintro stuff\n\n## The models and their linear forms\n\n## Simulating and fitting non-hierarchical data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngen_data_fe <- function(tmin = 1, tmax = 10, tstep = 1, N = 25, S = 101,\n\t\t\t\t\t\terror_var = 0.1, intercept = 1, slope = -0.5,\n\t\t\t\t\t\tlatent = TRUE) {\n\tset.seed(S)\n\t\n\t# Times for each individual\n\tt_vec <- seq(tmin, tmax, tstep)\n\t\n\t# Generate a grid of individuals and times\n\tind <-\n\t\tt_vec |>\n\t\treplicate(n = N) |>\n\t\t`colnames<-`(stringr::str_pad(1:N, width = 2, pad = \"0\")) |>\n\t\ttibble::as_tibble() |>\n\t\ttidyr::expand_grid() |>\n\t\ttidyr::pivot_longer(\n\t\t\tcols = dplyr::everything(),\n\t\t\tnames_to = \"id\",\n\t\t\tvalues_to = \"t\"\n\t\t)\n\t\n\t# Sample the data for each individual, using fixed effects for the\n\t# slope and intercept\n\tout <-\n\t\tind |>\n\t\t# TODO replace this with a function that can be dispatched separately\n\t\t# for RE/FE.\n\t\t# Set the model parameters for each individual as data variables\n\t\tdplyr::mutate(\n\t\t\t# Fixed intercept\n\t\t\tlog_a = intercept,\n\t\t\t# Fixed slope\n\t\t\tk = slope\n\t\t) |>\n\t\t# Calculate outcomes at observation level\n\t\tdplyr::mutate(\n\t\t\t# Random noise -- same for both models to better see differences\n\t\t\tnoise = rnorm(dplyr::n(), 0, error_var),\n\t\t\t# Exponential decay model\n\t\t\texp_mu = log_a + k * t,\n\t\t\texp_y = exp(exp_mu + noise),\n\t\t\t# Power law decay model\n\t\t\tpow_mu = log_a + k * log(t),\n\t\t\tpow_y = exp(pow_mu + noise)\n\t\t) |>\n\t\t# The price for code that is so readable in the mutate part is that\n\t\t# now we have to pivot, separate, and pivot again\n\t\t# First pivot is to get all of the outcome data in one column\n\t\ttidyr::pivot_longer(\n\t\t\tcols = c(exp_mu, exp_y, pow_mu, pow_y),\n\t\t\tnames_to = \"model_var\"\n\t\t) |>\n\t\t# Now separate the name column into a column for the model (exp, pow),\n\t\t# and a column for the variable (mu, y).\n\t\ttidyr::separate(model_var, into = c(\"model\", \"variable\"), sep = \"_\") |>\n\t\t# Pivot wider now so that y and mu are columns\n\t\ttidyr::pivot_wider(\n\t\t\tnames_from = variable,\n\t\t\tvalues_from = value\n\t\t) |>\n\t\t# Clean up model names\n\t\tdplyr::mutate(\n\t\t\tmodel = factor(\n\t\t\t\tmodel,\n\t\t\t\tlevels = c(\"exp\", \"pow\"),\n\t\t\t\tlabels = c(\"Exponential decay\", \"Power law decay\")\n\t\t\t)\n\t\t)\n\t\n\t# If latent is FALSE, drop all of the variables that we\n\t# wouldn't observe irl\n\tif (isFALSE(latent)) {\n\t\tout <- dplyr::select(out, id, t, model, y)\n\t}\n\t\n\treturn(out)\n}\n\nfe_data <- gen_data_fe()\n\np_fe <-\n\tggplot(fe_data) +\n\taes(x = t, y = y / max(y), color = id) +\n\tgeom_line(show.legend = FALSE) +\n\tgeom_point(show.legend = FALSE) +\n\tscale_y_continuous(limits = c(0, 1), breaks = scales::breaks_pretty()) +\n\tscale_x_continuous(limits = c(1, 10), breaks = scales::breaks_pretty()) +\n\tfacet_wrap(~model) +\n\tlabs(\n\t\ttitle = \"Simulation with fixed slope and intercept\\n\",\n\t\ty = \"Normalized y\"\n\t) +\n\tscale_color_grey()\n\np_fe\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nexp_mod_fe <- lm(\n\tlog(y) ~ t,\n\tdata = subset(fe_data, model == \"Exponential decay\")\n)\nsummary(exp_mod_fe)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = log(y) ~ t, data = subset(fe_data, model == \"Exponential decay\"))\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.28465 -0.06225 -0.00141  0.06400  0.21528 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  0.987366   0.012899   76.55   <2e-16 ***\nt           -0.497859   0.002079 -239.48   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.09441 on 248 degrees of freedom\nMultiple R-squared:  0.9957,\tAdjusted R-squared:  0.9957 \nF-statistic: 5.735e+04 on 1 and 248 DF,  p-value: < 2.2e-16\n```\n:::\n\n```{.r .cell-code}\npow_mod_fe <- lm(\n\tlog(y) ~ log(t),\n\tdata = subset(fe_data, model == \"Power law decay\")\n)\nsummary(pow_mod_fe)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = log(y) ~ log(t), data = subset(fe_data, model == \n    \"Power law decay\"))\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.285059 -0.062353 -0.002936  0.065286  0.213384 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  0.986596   0.014282   69.08   <2e-16 ***\nlog(t)      -0.491694   0.008589  -57.25   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.09444 on 248 degrees of freedom\nMultiple R-squared:  0.9297,\tAdjusted R-squared:  0.9294 \nF-statistic:  3277 on 1 and 248 DF,  p-value: < 2.2e-16\n```\n:::\n:::\n\n\n\n\n## Simulating and fitting hierarchical data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngen_data_re <- function(tmin = 1, tmax = 10, tstep = 1, N = 25, S = 101,\n\t\t\t\t\t\terror_var = 0.1, intercept = c(1, 0.5),\n\t\t\t\t\t\tslope = c(-0.5, 0.25), latent = TRUE) {\n\tset.seed(S)\n\t\n\t# Times for each individual\n\tt_vec <- seq(tmin, tmax, tstep)\n\t\n\t# Generate a grid of individuals and times\n\tind <-\n\t\tt_vec |>\n\t\treplicate(n = N) |>\n\t\t`colnames<-`(stringr::str_pad(1:N, width = 2, pad = \"0\")) |>\n\t\ttibble::as_tibble() |>\n\t\ttidyr::expand_grid() |>\n\t\ttidyr::pivot_longer(\n\t\t\tcols = dplyr::everything(),\n\t\t\tnames_to = \"id\",\n\t\t\tvalues_to = \"t\"\n\t\t)\n\t\n\tout <-\n\t\tind |>\n\t\t# Sample random parameters at subject level\n\t\tdplyr::group_by(id) |>\n\t\tdplyr::mutate(\n\t\t\t# Random intercept\n\t\t\tlog_a = rnorm(1, intercept[1], intercept[2]),\n\t\t\t# Random slope\n\t\t\tk = rnorm(1, slope[1], slope[2])\n\t\t) |>\n\t\tdplyr::ungroup() |>\n\t\t# Calculate outcomes at observation level\n\t\tdplyr::mutate(\n\t\t\t# Random noise -- same for both models to better see differences\n\t\t\tnoise = rnorm(dplyr::n(), 0, error_var),\n\t\t\t# Exponential decay model\n\t\t\texp_mu = log_a + k * t,\n\t\t\texp_y = exp(exp_mu + noise),\n\t\t\t# Power law decay model\n\t\t\tpow_mu = log_a + k * log(t),\n\t\t\tpow_y = exp(pow_mu + noise)\n\t\t) |>\n\t\t# The price for code that is so readable in the mutate part is that\n\t\t# now we have to pivot, separate, and pivot again\n\t\t# First pivot is to get all of the outcome data in one column\n\t\ttidyr::pivot_longer(\n\t\t\tcols = c(exp_mu, exp_y, pow_mu, pow_y),\n\t\t\tnames_to = \"model_var\"\n\t\t) |>\n\t\t# Now separate the name column into a column for the model (exp, pow),\n\t\t# and a column for the variable (mu, y).\n\t\ttidyr::separate(model_var, into = c(\"model\", \"variable\"), sep = \"_\") |>\n\t\t# Pivot wider now so that y and mu are columns\n\t\ttidyr::pivot_wider(\n\t\t\tnames_from = variable,\n\t\t\tvalues_from = value\n\t\t) |>\n\t\t# Clean up model names\n\t\tdplyr::mutate(\n\t\t\tmodel = factor(\n\t\t\t\tmodel,\n\t\t\t\tlevels = c(\"exp\", \"pow\"),\n\t\t\t\tlabels = c(\"Exponential decay\", \"Power law decay\")\n\t\t\t)\n\t\t)\n\t\n\t# If latent is FALSE, drop all of the variables that we\n\t# wouldn't observe irl\n\tif (isFALSE(latent)) {\n\t\tout <- dplyr::select(out, id, t, model, y)\n\t}\n\t\n\treturn(out)\n}\n\nre_data <- gen_data_re(N = 100)\n\np_re <-\n\tggplot(re_data) +\n\taes(x = t, y = y / max(y), color = id) +\n\tgeom_line(show.legend = FALSE) +\n\tgeom_point(show.legend = FALSE) +\n\tscale_y_continuous(limits = c(0, 1), breaks = scales::breaks_pretty()) +\n\tscale_x_continuous(limits = c(1, 10), breaks = scales::breaks_pretty()) +\n\tfacet_wrap(~model) +\n\tggtitle(\"Simulation with random slope and intercept\\n\") +\n\tlabs(\n\t\ttitle = \"Simulation with random slope and intercept\\n\",\n\t\ty = \"Normalized y\"\n\t) +\n\tscale_color_grey()\n\np_re\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncowplot::plot_grid(p_fe, p_re, ncol = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_model <-\n\tbrms::brm(\n\t\tformula = log(y) ~ 0 + (1 + t | id),\n\t\tdata = re_data\n\t)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nCompiling Stan program...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nStart sampling\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\nSAMPLING FOR MODEL 'anon_model' NOW (CHAIN 1).\nChain 1: \nChain 1: Gradient evaluation took 0.000347 seconds\nChain 1: 1000 transitions using 10 leapfrog steps per transition would take 3.47 seconds.\nChain 1: Adjust your expectations accordingly!\nChain 1: \nChain 1: \nChain 1: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 1: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 1: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 1: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 1: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 1: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 1: \nChain 1:  Elapsed Time: 13.135 seconds (Warm-up)\nChain 1:                11.536 seconds (Sampling)\nChain 1:                24.671 seconds (Total)\nChain 1: \n\nSAMPLING FOR MODEL 'anon_model' NOW (CHAIN 2).\nChain 2: \nChain 2: Gradient evaluation took 0.00021 seconds\nChain 2: 1000 transitions using 10 leapfrog steps per transition would take 2.1 seconds.\nChain 2: Adjust your expectations accordingly!\nChain 2: \nChain 2: \nChain 2: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 2: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 2: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 2: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 2: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 2: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 2: \nChain 2:  Elapsed Time: 12.778 seconds (Warm-up)\nChain 2:                11.155 seconds (Sampling)\nChain 2:                23.933 seconds (Total)\nChain 2: \n\nSAMPLING FOR MODEL 'anon_model' NOW (CHAIN 3).\nChain 3: \nChain 3: Gradient evaluation took 0.000218 seconds\nChain 3: 1000 transitions using 10 leapfrog steps per transition would take 2.18 seconds.\nChain 3: Adjust your expectations accordingly!\nChain 3: \nChain 3: \nChain 3: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 3: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 3: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 3: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 3: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 3: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 3: \nChain 3:  Elapsed Time: 12.657 seconds (Warm-up)\nChain 3:                9.373 seconds (Sampling)\nChain 3:                22.03 seconds (Total)\nChain 3: \n\nSAMPLING FOR MODEL 'anon_model' NOW (CHAIN 4).\nChain 4: \nChain 4: Gradient evaluation took 0.00021 seconds\nChain 4: 1000 transitions using 10 leapfrog steps per transition would take 2.1 seconds.\nChain 4: Adjust your expectations accordingly!\nChain 4: \nChain 4: \nChain 4: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 4: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 4: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 4: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 4: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 4: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 4: \nChain 4:  Elapsed Time: 12.087 seconds (Warm-up)\nChain 4:                10.081 seconds (Sampling)\nChain 4:                22.168 seconds (Total)\nChain 4: \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_model |>\n\tbrms::posterior_summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                          Estimate   Est.Error          Q2.5         Q97.5\nsd_id__Intercept      7.878988e-01  0.09676235  6.027681e-01  9.798097e-01\nsd_id__t              3.352292e-01  0.02602874  2.871164e-01  3.892547e-01\ncor_id__Intercept__t -7.957416e-01  0.05670066 -8.911847e-01 -6.649574e-01\nsigma                 1.373704e+00  0.02242877  1.330872e+00  1.418150e+00\nr_id[01,Intercept]    4.823682e-01  0.45584258 -4.085870e-01  1.400195e+00\nr_id[02,Intercept]    7.306468e-01  0.47040217 -1.548266e-01  1.677212e+00\nr_id[03,Intercept]    2.110841e-01  0.46588448 -6.863857e-01  1.142080e+00\nr_id[04,Intercept]    4.682258e-01  0.46990724 -4.299083e-01  1.377515e+00\nr_id[05,Intercept]    5.679946e-01  0.47666617 -3.447224e-01  1.558221e+00\nr_id[06,Intercept]    8.198621e-01  0.47205940 -8.103918e-02  1.783221e+00\nr_id[07,Intercept]    6.668077e-01  0.46687409 -2.580269e-01  1.615714e+00\nr_id[08,Intercept]    8.683797e-01  0.46891327 -3.696360e-02  1.798792e+00\nr_id[09,Intercept]    8.755267e-01  0.47388561 -3.956403e-02  1.827733e+00\nr_id[10,Intercept]    3.358184e-01  0.44468035 -5.151299e-01  1.226728e+00\nr_id[100,Intercept]   7.655211e-01  0.44864811 -1.163243e-01  1.688350e+00\nr_id[11,Intercept]    4.991809e-01  0.45732354 -3.935506e-01  1.391624e+00\nr_id[12,Intercept]    8.011804e-01  0.46641954 -1.120304e-01  1.751250e+00\nr_id[13,Intercept]    1.176473e-01  0.45005551 -7.759713e-01  1.009900e+00\nr_id[14,Intercept]    4.721945e-01  0.45806356 -4.217753e-01  1.398290e+00\nr_id[15,Intercept]    7.511117e-01  0.47363029 -1.867124e-01  1.695016e+00\nr_id[16,Intercept]    5.482153e-01  0.45711904 -3.392816e-01  1.431003e+00\nr_id[17,Intercept]    7.427874e-01  0.47445989 -1.968146e-01  1.682045e+00\nr_id[18,Intercept]    5.621255e-01  0.45660208 -3.199667e-01  1.451070e+00\nr_id[19,Intercept]    1.089601e-01  0.44839641 -7.483122e-01  9.604228e-01\nr_id[20,Intercept]    7.194943e-01  0.46635086 -1.828655e-01  1.628773e+00\nr_id[21,Intercept]    8.508513e-01  0.46445523 -5.912872e-02  1.776990e+00\nr_id[22,Intercept]    8.431731e-01  0.45485077 -5.553276e-02  1.713454e+00\nr_id[23,Intercept]    4.380436e-01  0.46952803 -5.009122e-01  1.349656e+00\nr_id[24,Intercept]    7.005265e-01  0.46518516 -1.968254e-01  1.633235e+00\nr_id[25,Intercept]    4.780526e-01  0.44089180 -4.029390e-01  1.323371e+00\nr_id[26,Intercept]    7.760639e-01  0.44503632 -8.664010e-02  1.658594e+00\nr_id[27,Intercept]    6.586053e-01  0.45019610 -2.219457e-01  1.565518e+00\nr_id[28,Intercept]    4.819559e-01  0.46867353 -4.067000e-01  1.403421e+00\nr_id[29,Intercept]    8.616640e-01  0.46809927 -5.231795e-02  1.786722e+00\nr_id[30,Intercept]    8.393070e-01  0.47639428 -5.824267e-02  1.817834e+00\nr_id[31,Intercept]    6.347174e-01  0.45931795 -2.499231e-01  1.542019e+00\nr_id[32,Intercept]    7.900792e-01  0.46495119 -1.000785e-01  1.752716e+00\nr_id[33,Intercept]    4.968667e-01  0.47350801 -4.392583e-01  1.404155e+00\nr_id[34,Intercept]    6.799424e-01  0.46995477 -2.268162e-01  1.629956e+00\nr_id[35,Intercept]    7.366811e-01  0.47688840 -1.893400e-01  1.683188e+00\nr_id[36,Intercept]    3.845471e-01  0.47541996 -5.237375e-01  1.354867e+00\nr_id[37,Intercept]    5.277706e-01  0.47404224 -3.858358e-01  1.484485e+00\nr_id[38,Intercept]    1.089729e-01  0.44560295 -7.528352e-01  9.715802e-01\nr_id[39,Intercept]    7.668702e-01  0.46507834 -1.531259e-01  1.693097e+00\nr_id[40,Intercept]    7.934961e-01  0.45180859 -8.551846e-02  1.684770e+00\nr_id[41,Intercept]    7.983615e-01  0.45408005 -4.494048e-02  1.717175e+00\nr_id[42,Intercept]    3.814322e-01  0.48488303 -5.813221e-01  1.340414e+00\nr_id[43,Intercept]    4.103482e-01  0.46411684 -5.051002e-01  1.322025e+00\nr_id[44,Intercept]    3.364068e-01  0.46301999 -5.313783e-01  1.257598e+00\nr_id[45,Intercept]    7.410836e-01  0.45556113 -1.551124e-01  1.652125e+00\nr_id[46,Intercept]    6.455244e-01  0.45746818 -2.185399e-01  1.560685e+00\nr_id[47,Intercept]    5.657322e-01  0.45218251 -3.242958e-01  1.444819e+00\nr_id[48,Intercept]    5.721582e-01  0.46009510 -3.109385e-01  1.488036e+00\nr_id[49,Intercept]    4.117687e-01  0.44241849 -4.596563e-01  1.280687e+00\nr_id[50,Intercept]    5.104964e-01  0.45306952 -3.981466e-01  1.401983e+00\nr_id[51,Intercept]    5.129275e-01  0.45252995 -3.751228e-01  1.430858e+00\nr_id[52,Intercept]    7.830840e-01  0.45067338 -7.423210e-02  1.677050e+00\nr_id[53,Intercept]    2.087005e-01  0.47246541 -7.003291e-01  1.141298e+00\nr_id[54,Intercept]    8.027521e-01  0.44283623 -4.352549e-02  1.688749e+00\nr_id[55,Intercept]    7.906511e-01  0.47605324 -1.722508e-01  1.685963e+00\nr_id[56,Intercept]    5.061418e-01  0.44799545 -3.609726e-01  1.401895e+00\nr_id[57,Intercept]    5.449413e-01  0.47402261 -3.357008e-01  1.516546e+00\nr_id[58,Intercept]    8.484069e-01  0.46255179 -4.076591e-02  1.755069e+00\nr_id[59,Intercept]    5.088581e-01  0.45458412 -3.638020e-01  1.409367e+00\nr_id[60,Intercept]    5.481358e-01  0.44737492 -3.424354e-01  1.412200e+00\nr_id[61,Intercept]    2.490203e-01  0.45563528 -6.474058e-01  1.121639e+00\nr_id[62,Intercept]    6.890141e-01  0.46267755 -1.954301e-01  1.610253e+00\nr_id[63,Intercept]    8.956869e-01  0.45873747 -2.041980e-02  1.798422e+00\nr_id[64,Intercept]    7.545629e-01  0.45536822 -1.329103e-01  1.672383e+00\nr_id[65,Intercept]    5.634039e-01  0.44477765 -2.973623e-01  1.463396e+00\nr_id[66,Intercept]    6.268942e-01  0.45178008 -2.646929e-01  1.503291e+00\nr_id[67,Intercept]    8.131823e-01  0.45599769 -6.702206e-02  1.732986e+00\nr_id[68,Intercept]    6.068282e-01  0.45330658 -2.962517e-01  1.514424e+00\nr_id[69,Intercept]    8.320259e-01  0.44281744 -3.811683e-02  1.718694e+00\nr_id[70,Intercept]    6.847420e-01  0.45975690 -1.714816e-01  1.641790e+00\nr_id[71,Intercept]    9.746495e-01  0.46830708  7.812239e-02  1.915868e+00\nr_id[72,Intercept]    6.921716e-01  0.47150098 -2.093677e-01  1.663995e+00\nr_id[73,Intercept]    4.413721e-01  0.45552681 -4.402676e-01  1.334873e+00\nr_id[74,Intercept]    3.057976e-01  0.45920869 -6.144443e-01  1.190400e+00\nr_id[75,Intercept]    2.676931e-01  0.45709622 -6.294956e-01  1.166916e+00\nr_id[76,Intercept]    6.808617e-01  0.45997828 -2.064652e-01  1.636091e+00\nr_id[77,Intercept]    4.213405e-01  0.46186001 -4.880488e-01  1.338982e+00\nr_id[78,Intercept]    3.986494e-01  0.44125969 -4.398854e-01  1.290472e+00\nr_id[79,Intercept]    7.114585e-01  0.45137715 -1.804681e-01  1.577105e+00\nr_id[80,Intercept]    7.509779e-01  0.48878784 -1.591516e-01  1.735996e+00\nr_id[81,Intercept]    9.167920e-01  0.45069149  6.921411e-02  1.803211e+00\nr_id[82,Intercept]    4.481816e-01  0.44744471 -4.326310e-01  1.342009e+00\nr_id[83,Intercept]    4.580422e-01  0.45675425 -4.296327e-01  1.356791e+00\nr_id[84,Intercept]    2.893816e-01  0.45205843 -6.014770e-01  1.173419e+00\nr_id[85,Intercept]    8.828780e-01  0.46598519  7.516025e-04  1.804643e+00\nr_id[86,Intercept]    5.683980e-01  0.45734425 -3.372558e-01  1.466812e+00\nr_id[87,Intercept]    8.296349e-01  0.46983757 -7.976712e-02  1.790896e+00\nr_id[88,Intercept]    7.592363e-01  0.45931921 -1.258455e-01  1.672758e+00\nr_id[89,Intercept]    6.006855e-01  0.49165594 -3.393566e-01  1.611287e+00\nr_id[90,Intercept]    8.175685e-01  0.46374646 -5.992283e-02  1.779936e+00\nr_id[91,Intercept]    5.519531e-01  0.46158392 -3.165665e-01  1.482473e+00\nr_id[92,Intercept]    3.836409e-01  0.45909108 -4.925077e-01  1.311625e+00\nr_id[93,Intercept]    4.146003e-01  0.44822766 -4.602467e-01  1.289665e+00\nr_id[94,Intercept]    7.550234e-01  0.45228326 -1.544320e-01  1.626612e+00\nr_id[95,Intercept]    4.726672e-01  0.44677987 -3.833808e-01  1.337647e+00\nr_id[96,Intercept]    6.136176e-01  0.45601495 -2.857291e-01  1.524138e+00\nr_id[97,Intercept]    4.881221e-01  0.47283839 -3.770916e-01  1.449013e+00\nr_id[98,Intercept]    7.477579e-01  0.45764839 -1.372873e-01  1.653930e+00\nr_id[99,Intercept]    4.871366e-01  0.44767669 -3.753577e-01  1.370304e+00\nr_id[01,t]           -2.245107e-01  0.08537825 -3.883565e-01 -5.343331e-02\nr_id[02,t]           -3.346754e-01  0.08652497 -5.084225e-01 -1.687901e-01\nr_id[03,t]            7.247120e-02  0.08659724 -9.861057e-02  2.393592e-01\nr_id[04,t]           -4.460357e-02  0.08649943 -2.156651e-01  1.279010e-01\nr_id[05,t]           -1.195534e-01  0.08612476 -2.883417e-01  5.105722e-02\nr_id[06,t]           -2.499879e-01  0.08527108 -4.191533e-01 -8.371355e-02\nr_id[07,t]           -2.055109e-01  0.08661815 -3.756218e-01 -3.454858e-02\nr_id[08,t]           -6.234696e-01  0.08472915 -7.922701e-01 -4.540167e-01\nr_id[09,t]           -3.044947e-01  0.08908631 -4.813503e-01 -1.317920e-01\nr_id[10,t]            2.132636e-02  0.08313969 -1.421435e-01  1.832414e-01\nr_id[100,t]          -3.340340e-01  0.08317069 -5.013298e-01 -1.709327e-01\nr_id[11,t]           -2.996219e-01  0.08466497 -4.643662e-01 -1.336927e-01\nr_id[12,t]           -2.125879e-01  0.08728742 -3.819111e-01 -4.241629e-02\nr_id[13,t]           -3.883754e-02  0.08689390 -2.063379e-01  1.326944e-01\nr_id[14,t]           -1.315904e-01  0.08549239 -3.036364e-01  3.865581e-02\nr_id[15,t]           -4.075746e-01  0.08617724 -5.757129e-01 -2.384080e-01\nr_id[16,t]           -3.996284e-01  0.08626711 -5.663360e-01 -2.269886e-01\nr_id[17,t]           -4.034425e-01  0.08781714 -5.752404e-01 -2.328451e-01\nr_id[18,t]           -3.879350e-01  0.08571507 -5.578152e-01 -2.190060e-01\nr_id[19,t]           -1.706477e-01  0.08200598 -3.302619e-01 -1.160917e-02\nr_id[20,t]           -3.916427e-01  0.08554536 -5.612945e-01 -2.261285e-01\nr_id[21,t]           -3.642138e-01  0.08824517 -5.368174e-01 -1.920719e-01\nr_id[22,t]           -6.189164e-01  0.08389230 -7.840766e-01 -4.564905e-01\nr_id[23,t]           -4.060656e-01  0.08594101 -5.706974e-01 -2.383884e-01\nr_id[24,t]           -1.560276e-01  0.08671063 -3.278985e-01  1.303650e-02\nr_id[25,t]           -4.435553e-01  0.08388636 -6.076116e-01 -2.810922e-01\nr_id[26,t]           -3.648796e-01  0.08430051 -5.261428e-01 -1.985911e-01\nr_id[27,t]           -3.183425e-01  0.08506387 -4.939418e-01 -1.507568e-01\nr_id[28,t]            3.518616e-02  0.08610221 -1.320087e-01  2.029640e-01\nr_id[29,t]           -4.533839e-01  0.08764646 -6.252821e-01 -2.801618e-01\nr_id[30,t]           -3.589331e-01  0.08607661 -5.297954e-01 -1.872360e-01\nr_id[31,t]           -2.037137e-01  0.08391417 -3.704154e-01 -4.039225e-02\nr_id[32,t]           -2.349302e-01  0.08409940 -3.999977e-01 -7.008100e-02\nr_id[33,t]           -6.168669e-01  0.08508849 -7.791003e-01 -4.466638e-01\nr_id[34,t]           -4.801078e-02  0.08707974 -2.161810e-01  1.266628e-01\nr_id[35,t]           -5.916673e-01  0.08641998 -7.595374e-01 -4.205709e-01\nr_id[36,t]            4.985613e-02  0.08856352 -1.252826e-01  2.233275e-01\nr_id[37,t]            9.951954e-02  0.08676243 -6.804882e-02  2.702781e-01\nr_id[38,t]           -6.301260e-02  0.08306984 -2.213425e-01  9.740708e-02\nr_id[39,t]           -3.127614e-01  0.08506608 -4.766035e-01 -1.484290e-01\nr_id[40,t]           -3.882069e-01  0.08381399 -5.554458e-01 -2.267151e-01\nr_id[41,t]           -2.847918e-01  0.08431628 -4.509664e-01 -1.226563e-01\nr_id[42,t]           -5.931806e-01  0.08622441 -7.583325e-01 -4.204546e-01\nr_id[43,t]           -2.250796e-01  0.08539810 -3.969627e-01 -6.472107e-02\nr_id[44,t]           -1.937598e-01  0.08508160 -3.671152e-01 -3.035800e-02\nr_id[45,t]           -2.940076e-01  0.08526414 -4.613768e-01 -1.282929e-01\nr_id[46,t]           -1.513580e-01  0.08570873 -3.222435e-01  1.624199e-02\nr_id[47,t]           -3.690028e-01  0.08505510 -5.362577e-01 -2.072813e-01\nr_id[48,t]           -3.167918e-01  0.08432530 -4.806431e-01 -1.534928e-01\nr_id[49,t]           -3.965917e-01  0.08279122 -5.583790e-01 -2.372784e-01\nr_id[50,t]           -4.090292e-01  0.08654900 -5.790413e-01 -2.385345e-01\nr_id[51,t]           -2.285481e-01  0.08441023 -3.975753e-01 -6.221297e-02\nr_id[52,t]           -3.538608e-01  0.08321952 -5.181849e-01 -1.961715e-01\nr_id[53,t]           -1.702863e-01  0.08550331 -3.387768e-01 -2.498618e-03\nr_id[54,t]           -2.984731e-01  0.08370105 -4.692461e-01 -1.366280e-01\nr_id[55,t]           -7.798704e-01  0.08707879 -9.519536e-01 -6.110275e-01\nr_id[56,t]           -1.688302e-01  0.08505943 -3.346740e-01 -2.312460e-03\nr_id[57,t]            1.416182e-01  0.08732566 -4.078585e-02  3.079197e-01\nr_id[58,t]           -2.656462e-01  0.08707781 -4.336321e-01 -9.840395e-02\nr_id[59,t]           -2.386953e-01  0.08506124 -4.077002e-01 -7.716909e-02\nr_id[60,t]           -2.660343e-01  0.08491252 -4.269940e-01 -9.457369e-02\nr_id[61,t]           -2.381846e-01  0.08681885 -4.035236e-01 -6.576825e-02\nr_id[62,t]           -5.348346e-01  0.08452807 -7.010344e-01 -3.700399e-01\nr_id[63,t]           -5.283510e-01  0.08447237 -6.917691e-01 -3.642547e-01\nr_id[64,t]           -3.793931e-01  0.08423798 -5.435954e-01 -2.128078e-01\nr_id[65,t]           -9.503409e-02  0.08239428 -2.578126e-01  6.991361e-02\nr_id[66,t]           -4.259054e-01  0.08469852 -5.891179e-01 -2.619709e-01\nr_id[67,t]           -4.644432e-01  0.08320724 -6.298842e-01 -3.013765e-01\nr_id[68,t]           -2.620794e-01  0.08557164 -4.327189e-01 -9.970027e-02\nr_id[69,t]           -5.747780e-01  0.08337712 -7.396244e-01 -4.154145e-01\nr_id[70,t]           -8.553363e-02  0.08625543 -2.578411e-01  8.219972e-02\nr_id[71,t]           -2.774658e-01  0.08724981 -4.460541e-01 -1.071739e-01\nr_id[72,t]           -8.822327e-02  0.08736649 -2.611596e-01  7.580413e-02\nr_id[73,t]           -8.287737e-02  0.08455812 -2.469821e-01  7.847812e-02\nr_id[74,t]           -2.808320e-01  0.08721958 -4.503443e-01 -1.112166e-01\nr_id[75,t]           -1.005083e-01  0.08703758 -2.728029e-01  6.343560e-02\nr_id[76,t]           -2.542960e-01  0.08626879 -4.234873e-01 -8.002815e-02\nr_id[77,t]           -3.189643e-01  0.08468662 -4.881596e-01 -1.529105e-01\nr_id[78,t]           -2.779591e-02  0.08313191 -1.940265e-01  1.328830e-01\nr_id[79,t]           -4.324184e-01  0.08438083 -5.998022e-01 -2.642251e-01\nr_id[80,t]           -1.637894e-02  0.08935029 -1.935062e-01  1.555274e-01\nr_id[81,t]           -3.669151e-01  0.08653708 -5.389513e-01 -1.985622e-01\nr_id[82,t]           -2.589038e-01  0.08306586 -4.231882e-01 -1.009498e-01\nr_id[83,t]           -1.891834e-01  0.08383889 -3.567436e-01 -2.545385e-02\nr_id[84,t]           -2.444569e-01  0.08466229 -4.115280e-01 -7.971098e-02\nr_id[85,t]           -3.959116e-01  0.08643113 -5.674696e-01 -2.314694e-01\nr_id[86,t]           -2.692336e-01  0.08554795 -4.370866e-01 -1.019397e-01\nr_id[87,t]           -2.262043e-01  0.08486361 -3.942083e-01 -6.349339e-02\nr_id[88,t]           -2.635232e-01  0.08556589 -4.286357e-01 -9.736530e-02\nr_id[89,t]            1.085745e-01  0.08887373 -6.950312e-02  2.801099e-01\nr_id[90,t]           -1.831025e-01  0.08842552 -3.559431e-01 -1.033669e-02\nr_id[91,t]           -1.781971e-01  0.08492792 -3.463761e-01 -1.635688e-02\nr_id[92,t]           -3.242553e-02  0.08446516 -2.037862e-01  1.300436e-01\nr_id[93,t]           -2.207934e-01  0.08496931 -3.840393e-01 -5.301437e-02\nr_id[94,t]           -3.875416e-01  0.08539704 -5.515540e-01 -2.216094e-01\nr_id[95,t]           -2.885337e-01  0.08375636 -4.510392e-01 -1.263112e-01\nr_id[96,t]           -3.991741e-01  0.08446088 -5.652518e-01 -2.352840e-01\nr_id[97,t]            1.535958e-01  0.08750912 -1.743827e-02  3.231499e-01\nr_id[98,t]           -3.314627e-01  0.08591678 -5.032270e-01 -1.640520e-01\nr_id[99,t]           -2.960925e-01  0.08455324 -4.635446e-01 -1.329025e-01\nlprior               -4.635144e+00  0.01741485 -4.672426e+00 -4.604572e+00\nlp__                 -3.761466e+03 14.26880767 -3.791282e+03 -3.734558e+03\n```\n:::\n:::\n\n\n\n## Can we include covariates?\n\n## The Wrap-Up\n\n## Details {.appendix}\n\nLast updated at 2023-11-06 09:09:31.364427.\n\n[source code](https://github.com/wzbillings/zlog/tree/master/_posts/posts/2023-07-25_Simulating-Titer-Data/index.Rmd)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16 ucrt)\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\nRunning under: Windows 10 x64 (build 19045)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n[1] ggplot2_3.4.4\n\nloaded via a namespace (and not attached):\n  [1] tidyselect_1.2.0     dplyr_1.0.10         farver_2.1.1        \n  [4] loo_2.5.1            fastmap_1.1.0        tensorA_0.36.2      \n  [7] shinystan_2.6.0      promises_1.2.0.1     shinyjs_2.1.0       \n [10] digest_0.6.33        mime_0.12            lifecycle_1.0.3     \n [13] StanHeaders_2.26.13  ellipsis_0.3.2       processx_3.8.2      \n [16] magrittr_2.0.3       posterior_1.3.1      compiler_4.3.1      \n [19] rlang_1.1.1          tools_4.3.1          igraph_1.3.5        \n [22] utf8_1.2.2           yaml_2.3.6           knitr_1.40          \n [25] prettyunits_1.1.1    bridgesampling_1.1-2 htmlwidgets_1.5.4   \n [28] curl_4.3.3           pkgbuild_1.3.1       plyr_1.8.7          \n [31] dygraphs_1.1.1.6     abind_1.4-5          miniUI_0.1.1.1      \n [34] withr_2.5.0          purrr_0.3.5          grid_4.3.1          \n [37] stats4_4.3.1         fansi_1.0.3          xts_0.12.2          \n [40] xtable_1.8-4         colorspace_2.0-3     inline_0.3.19       \n [43] scales_1.2.1         gtools_3.9.3         ggridges_0.5.4      \n [46] cli_3.6.1            mvtnorm_1.1-3        crayon_1.5.2        \n [49] rmarkdown_2.17       generics_0.1.3       RcppParallel_5.1.5  \n [52] reshape2_1.4.4       rstan_2.26.13        zlib_0.0.1          \n [55] stringr_1.4.1        shinythemes_1.2.0    bayesplot_1.9.0     \n [58] parallel_4.3.1       matrixStats_0.62.0   base64enc_0.1-3     \n [61] brms_2.20.4          vctrs_0.5.0          V8_4.2.1            \n [64] Matrix_1.5-3         jsonlite_1.8.7       callr_3.7.3         \n [67] crosstalk_1.2.0      tidyr_1.2.1          glue_1.6.2          \n [70] codetools_0.2-19     ps_1.7.5             cowplot_1.1.1       \n [73] DT_0.26              distributional_0.3.1 stringi_1.7.8       \n [76] gtable_0.3.1         later_1.3.0          munsell_0.5.0       \n [79] tibble_3.1.8         colourpicker_1.1.1   pillar_1.8.1        \n [82] htmltools_0.5.3      Brobdingnag_1.2-9    R6_2.5.1            \n [85] evaluate_0.23        shiny_1.7.2          lattice_0.20-45     \n [88] markdown_1.2         backports_1.4.1      threejs_0.3.3       \n [91] renv_1.0.3           httpuv_1.6.6         rstantools_2.2.0    \n [94] Rcpp_1.0.9           coda_0.19-4          gridExtra_2.3       \n [97] nlme_3.1-162         checkmate_2.1.0      xfun_0.34           \n[100] zoo_1.8-11           pkgconfig_2.0.3     \n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}