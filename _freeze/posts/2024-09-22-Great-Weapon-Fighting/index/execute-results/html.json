{
  "hash": "5f75d4457cede57facf6a510c8e70e88",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"2014 vs. 2024 Great Weapon Fighting\"\nauthor: \"Zane Billings\"\ndate: \"2024-09-22\"\ndescription: |\n  The new D&D Player's Handbook (5th edition 2024) came out recently, and the\n  Great Weapon Fighting fighting style is a bit different. But is it better,\n  or is the old one better?\nlicense: \"CC BY-NC-SA\"\ncategories:\n  - dnd\n  - dice problems\n# image: thumbnail.png\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n    code-tools: true\n    # code-links:\n    #   - text: 'Enumeration code'\n    #     icon: file-code\n    #     href: enumeration.R\n    #   - text: 'Simulation example'\n    #     icon: file-code\n    #     href: simulation.R\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nbase_pth <- here::here(\"posts/2024-09-22-Great-Weapon-Fighting\")\nsource(here::here(base_pth, \"enumeration.R\"), echo = FALSE)\n```\n:::\n\n\n\nThe new version of the Dungeons and Dragons 5th Edition rules came out this\nmonth, featuring some changes to features from the 2014 version of the rules.\nI'm getting ready to start a new campaign (as a player! which is still very\nfun and unusual for me) and I decided that I'm going to go out on a limb\nand play a fighter this time. And of course, if I'm going to be a fighter,\nI'm going to have a Cloud Strife, Zabuza, Guts Berserk type of sword.\n\nAn interesting statistical exercise arises from the fact that **Great Weapon\nFighting**, an ability that makes your fighter character better at using\nlarge weapons, is one of the abilities that has been updated in the 2024\nedition of the Player's Handbook. While the change in wording might seem\nsmall from just reading the text, the damage distributions of affected weapons\nis changed a lot. For reference, here's the text from the 2014 version.\n\n> **Great Weapon Fighting.** When you roll a 1 or 2 on a damage die for an\nattack you make with a melee weapon that you are wielding with two hands, you\ncan reroll the die and must use the new roll, even if the new roll is a 1 or a\n2. The weapon must have the two-handed or versatile property for you to gain\nthis benefit. --- Player's Handbook, 2014.\n\nAnd here's the text from the 2024 version.\n\n> **Great Weapon Fighting.** When you roll damage for an attack you make with a\nMelee weapon that you are holding with two hands, you can treat any 1 or 2 on a\ndamage die as a 3. The weapon must have the Two-Handed or Versatile property to\ngain this benefit. --- Player's Handbook, 2024.\n\nIn the 2014 version, you can still roll a 1 or 2, although the chance is\ngreatly diminished. In the 2024 version, the lowest number you can roll is a 3.\nNow, when I first read this, my thought was \"oh, clearly the 2024 version\nis better\" which I think is an easy misinterpretation to make. While the\nthreshold for the lowest value you can roll is raised, *you are actually less\nlikely to get high rolls* with the 2024 version than with the 2014 version.\nThat's because those rerolls are powerful -- instead of just increasing the\nprobability of a 3, they increase the probability of rolling values that are\nhigher than three.\n\nOf course, as a statistical something-or-other, my inclination was to quantify\nhow influential this effect as. And as a D&D player since 2016-ish (hard to\nbelieve it's been 8 years…), I thought this would be a pretty fun problem\nto solve. It's also not too difficult, fortunately. So let's walk through\nthe solution.\n\nOne major caveat is that *which of the versions is better* depends on the die\nwe're rolling. For example, if we're rolling four-sided dice (d4's in D&D\nnomenclature), bumping our lower values up to three will have a larger impact\non the expected value of our rolls than if we're rolling a d12. So I'll\nwork this problem out for the two most common types of damage rolls for a\nGWF-affected heavy weapon in 5th edition D&D: a weapon that does 1d12 damage,\nand a weapon that does 2d6 damage. I have, for some time, been a 2d6 fan\n(because rolling more dice is more fun) and it turns out the resulting\ndistributions in the 2d6 case are more interesting, so that's yet another\nreason to make a character using a greatsword, which is one of those 2d6\nweapons.\n\n# How to calculate those probabilities\n\nWe'll compare both of the GWF cases, and we'll also include the base case of\nrolling without GWF at all, so we can see how the two versions compare to\neach other, and also to the baseline.\n\n## No GWF\n\nThe case for no GWF is simple. For the 1d12 weapon, assuming the die is fair,\nthe distribution is just $1/12$ for each of the values. The distribution for\n2d6 is not much more complicated, and is a common problem in introductory\nprobability courses and textbooks. I'll use a set of helper functions that\nwill be useful for more complex problems that I included in the\nenumeration code file.\n\nHere's the table of probabilities for a 2d6 weapon with no GWF.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_distribution(6, 2, \"none\", FALSE) |>\n  knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n| value| freq| rel_freq|\n|-----:|----:|--------:|\n|     2|    1|   0.0278|\n|     3|    2|   0.0556|\n|     4|    3|   0.0833|\n|     5|    4|   0.1111|\n|     6|    5|   0.1389|\n|     7|    6|   0.1667|\n|     8|    5|   0.1389|\n|     9|    4|   0.1111|\n|    10|    3|   0.0833|\n|    11|    2|   0.0556|\n|    12|    1|   0.0278|\n\n\n:::\n:::\n\n\n\nUsing the normal rules for calculating the mean and standard deviation from\nthis kind of distribution table, we can get that **in summary**:\n\n- the 1d12 weapon will have an expected value of $6.50 ± 3.45$; and\n- the 2d6 weapon will have an expected value of $7.00 ± 2.42$.\n\nOf course these summary metrics are not the only useful information for us,\nbut they are a concise way to represent the amount of damage we can expect to\ndo with one attack.\n\n## 2024 GWF\n\n> **Great Weapon Fighting.** When you roll damage for an attack you make with a\nMelee weapon that you are holding with two hands, you can treat any 1 or 2 on a\ndamage die as a 3. The weapon must have the Two-Handed or Versatile property to\ngain this benefit. --- Player's Handbook, 2024.\n\nI'm doing the 2024 version first because it's actually less interesting than the\n2014 version. To compute the probabilities for one die, we can calculate all the\nsame probabilities from the no GWF case, and then compute the probability of\nrolling a three as the probability of rolling a three or less. That is,\n$$\nP(3 \\mid \\text{2024 GWF}) = P(1 \\mid \\text{no GWF}) +\nP(2 \\mid \\text{no GWF}) +\nP(3 \\mid \\text{no GWF}).\n$$\n\nSo for a 1d12 weapon, the probability of rolling a 3 would be $3/12 = 1/4$,\nthe probability of rolling a 1 or 2 is $0$, and the probability of rolling any\nother number $4, 5, \\ldots, 12$ is $1/12$ as before.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_distribution(12, 1, \"new\", FALSE) |>\n  knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n| value| freq| rel_freq|\n|-----:|----:|--------:|\n|     3|    3|   0.2500|\n|     4|    1|   0.0833|\n|     5|    1|   0.0833|\n|     6|    1|   0.0833|\n|     7|    1|   0.0833|\n|     8|    1|   0.0833|\n|     9|    1|   0.0833|\n|    10|    1|   0.0833|\n|    11|    1|   0.0833|\n|    12|    1|   0.0833|\n\n\n:::\n:::\n\n\n\nFor a 2d6 weapon, we have the additional issue of having to add two dice\ntogether. So while the same formula works for one dice, like so:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_distribution(6, 1, \"new\", FALSE) |>\n  knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n| value| freq| rel_freq|\n|-----:|----:|--------:|\n|     3|    3|   0.5000|\n|     4|    1|   0.1667|\n|     5|    1|   0.1667|\n|     6|    1|   0.1667|\n\n\n:::\n:::\n\n\n\nwe need to calculate the distribution of the sum. The function that I'm\nusing does this by enumerating all of the possible combinations of the two\ndie rolls, calculating the sum of each combination, and normalizing to get\nthe percentages. For the 2024 version of GWF, we can get the combinations in\nthe correct proportions by finding the combinations of $k$ dice with the faces\n$3, 3, 3, 4, 5, \\ldots, n$ instead of $1, 2, \\ldots, n$. This tactic of\nusing one die with modified faces will be crucial for the 2014 GWF probabilities\nso it's nice to think about this problem that way.\n\nAnyways, calculating the probabilities in that way gives the following table\nfor a 2d6 weapon.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_distribution(6, 2, \"new\", FALSE) |>\n  knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n| value| freq| rel_freq|\n|-----:|----:|--------:|\n|     6|    9|   0.2500|\n|     7|    6|   0.1667|\n|     8|    7|   0.1944|\n|     9|    8|   0.2222|\n|    10|    3|   0.0833|\n|    11|    2|   0.0556|\n|    12|    1|   0.0278|\n\n\n:::\n:::\n\n\n\nIt makes sense that 6 is the lowest value we can roll -- each of the two dice\nhas to be a 3 or greater. The dip in probability for 7 is interesting though,\nbecause 7 is famously the most common number to roll for 2d6 without any\nspecial rules. This distribution also forms an interesting asymmetrical shape\nwith a weird dip in it.\n\n**In summary:** for the 2024 GWF version, we get\n\n- the 1d12 weapon will have an expected value of $6.75 ± 3.11$; and\n- the 2d6 weapon will have an expected value of $8.00 ± 1.63$.\n\nInterestingtly, the expected improvement is much higher for the 2d6 weapon\nthan for the 1d12 weapon. That's a combination of the effect of improving two\ndie rolls instead of just one, and the fact that the new correction is better\nfor weapons with smaller damage dice. So maybe a weapon that uses a sum of d4s\n(or d3s? lol) would be best with this correction. Like a greatwhip or something\nelse that doesn't exist.\n\n## 2014 GWF\n\n> **Great Weapon Fighting.** When you roll a 1 or 2 on a damage die for an\nattack you make with a melee weapon that you are wielding with two hands, you\ncan reroll the die and must use the new roll, even if the new roll is a 1 or a\n2. The weapon must have the two-handed or versatile property for you to gain\nthis benefit. --- Player's Handbook, 2014.\n\nThe 2014 GWF case is the hardest one to calculate analytically. The trick to\nthis one is to stop thinking about the problem as \"one die roll, and sometimes\na second one\". Thinking about it that way will give you results, but it is\nconceptually more difficult. Instead we should try and reframe the problem as\n\"if I were only rolling one die, what faces would that die have to have?\"\nThe die for this problem will certainly not exist in real life, so first let's\ntake the 1d12 case as an example.\n\n- We can get a 1 by rolling either a 1 or 2, which will cause us to reroll, and\nthen rolling a 1 on the second die. These are the ONLY ways we can roll a 1 for\nthe result. So there are two ways we can get a 1.\n- We can get a 2 by rolling either a 1 or 2, triggering a reroll, then then\nrolling a 2. So similarly there are two ways we can get a 2 as our result.\n- We can get a 3 by rolling a 3 on the first die, or by rolling either a 1 or 2\non the first die, and then a 3 on the second die. *The tricky part is changing\nhow we think about this roll*.\n- We can get a 4, 5, whatever, up to 12, in the exact same way as a 3, those\nnumbers are all equally likely.\n\nTo think about the probability of rolling a 3, imaging that you always roll the\nsecond die. However, if the result of the first die is not a 1 or a 2, we just\nignore the second die. Since we're rolling 2d12, that means there are **144\npossible outcomes**, and if we were going to roll one hypothetical die, it\nwould have to be 144 faces. (Or in general, $n^2$ faces for an $n$-sided die.)\nFrom what we established above, there have to be two faces with a 1 on them,\nand then two faces with a 2 on them. Then we have 140 faces left to fill with\n10 equally likely outcomes, so each remaining die has to get $14$ faces.\n\nWe can also think about choosing the number of faces that show, e.g., a 3, like\nthis. If we roll a three on the first d12, there are twelve ways we can roll\nthe second d12 and the outcome will still be 3. However, if we roll a 1 or 2\non the first d12, and then a 3 on the second d12, that gives us 2 more ways\nto get a 3 overall. So we see we can get $12 + 2 = 14$ (or in the general\ncase, $n+2$) faces with a 3 on them. And the math works out the same for\nfaces numbered $4, \\ldots, 12$.\n\nThat means the probability of rolling a given number is given by the number of\nfaces showing that number divided by the total number of faces. So that's\n$$P(1) = P(2) = 2 / 144; \\quad P(3) = \\ldots = P(12) = 14 / 144.$$\n\nThe table is shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_distribution(12, 1, \"old\", FALSE) |>\n  knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n| value| freq| rel_freq|\n|-----:|----:|--------:|\n|     1|    2|   0.0139|\n|     2|    2|   0.0139|\n|     3|   14|   0.0972|\n|     4|   14|   0.0972|\n|     5|   14|   0.0972|\n|     6|   14|   0.0972|\n|     7|   14|   0.0972|\n|     8|   14|   0.0972|\n|     9|   14|   0.0972|\n|    10|   14|   0.0972|\n|    11|   14|   0.0972|\n|    12|   14|   0.0972|\n\n\n:::\n:::\n\n\n\nNow, that's for just one die. If we want to roll multiple dice, say 2d6, under\nthe 2014 GWF rules, we are actually rolling two of those special $n^2$ faced\ndies we just discovered. Then we can get all of the combinations of two of\nthose special dice and find the distribution of their sum. That's exactly\nwhat the `get_distribution()` function is doing to get the following table.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_distribution(6, 2, \"old\", FALSE) |>\n  knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n| value| freq| rel_freq|\n|-----:|----:|--------:|\n|     2|    4|   0.0031|\n|     3|    8|   0.0062|\n|     4|   36|   0.0278|\n|     5|   64|   0.0494|\n|     6|  128|   0.0988|\n|     7|  192|   0.1481|\n|     8|  224|   0.1728|\n|     9|  256|   0.1975|\n|    10|  192|   0.1481|\n|    11|  128|   0.0988|\n|    12|   64|   0.0494|\n\n\n:::\n:::\n\n\n\nWe can see that now, 9 is the mostly likely outcome instead of 7, and the\nlow rolls of 2 and 3 are much less likely as well.\n\n**In summary:** for the 2014 GWF version, we get\n\n- the 1d12 weapon will have an expected value of $7.33 ± 3.00$; and\n- the 2d6 weapon will have an expected value of $8.33 ± 2.01$.\n\nSo again, it seems that the improvement favors the 2d6 weapon instead of the\n1d12 weapon. The effect of benefitting two dice instead of just one die seems\nto be quite strong.\n\n# Visualization and comparison\n\nNow, these tables are not the best way to visualize the comparisons we want\nto make, a figure will be much more useful. So let's make some. First we need\nto do some calculations and data cleaning to compute the probability for all\n6 cases we're interested in, and store them in a nice data frame. You can\nexpand the code to see how I did that with my helper functions.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a list that includes the function we want to call along with vectors\n# specifying the arguments to map over\ncombos_to_run <- list(\n\tf = get_distribution,\n\tn = c(12, 12, 12, 6, 6, 6),\n\tk = c(1, 1, 1, 2, 2, 2),\n\twhich_gwf = c(\"none\", \"old\", \"new\", \"none\", \"old\", \"new\")\n)\n# use the Map function to call get_distribution() with each set of args\nresults <- do.call(Map, combos_to_run)\n\n# data cleaning to get a nice data frame for ggplot\nresults_df <- do.call(rbind, results)\nresults_processed <- results_df\nresults_processed$weapon <- paste0(\n\tresults_processed$k, \"d\", results_processed$n\n)\nresults_processed$n <- NULL\nresults_processed$k <- NULL\nresults_processed$which_gwf <- factor(\n  results_processed$which_gwf,\n  levels = c(\"none\", \"old\", \"new\"),\n  labels = c(\"No GWF\", \"2014 GWF\", \"2024 GWF\")\n)\n```\n:::\n\n\n\n\n## Probability of each outcome\n\nFirst, we'll look at distribution curves for both weapons under each of the\nconditions we just walked through. These curves will show the damage value\nrolled on the x-axis and the probability of rolling **exactly** that value on\nthe $y$-axis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresults_processed |>\n  ggplot() +\n  aes(x = value, y = rel_freq, color = which_gwf, shape = which_gwf) +\n  geom_point(alpha = 0.75, stroke = 1, size = 3) +\n  geom_line(alpha = 0.75, linewidth = 1) +\n  scale_x_continuous(\n    name = \"Damage result\",\n    breaks = seq(1, 12, 1),\n    minor_breaks = NULL,\n    limits = c(0.5, 12.5)\n  ) +\n  scale_y_continuous(\n    name = \"P(X = x)\",\n    breaks = scales::breaks_pretty(),\n    labels = scales::label_percent()\n  ) +\n  scale_color_brewer(\n    name = \"Rule\",\n    palette = \"Dark2\"\n  ) +\n  scale_shape_manual(\n    name = \"Rule\",\n    values = 15:17\n  ) +\n  facet_wrap(vars(weapon)) +\n  theme_minimal(base_size = 18) +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/exact probability plot-1.png){width=672}\n:::\n:::\n\n\n\nBy looking at the plot, we can see some interesting observations. Of course,\nthe distributions for the 2d6 weapon damage are in general more interesting\nthan for 1d12. For 1d12, we can see that the 2024 outcome really boosts the\nprobability of rolling a 3 but is otherwise exactly the same as having no\nGWF, while the 2014 outcome slightly boosts the probability of each number 3 or\nlarger but drastically lowers the chance of getting a 1 or 2.\n\nFor the 2d6 outcome, we can see that both corrections have an obvious impact\nthat increases the average amount of damage, but in weird ways that are (at\nleast to me) not incredibly intuitive. For the 2014 GWF distribution, 9 is the\nmost common outcome, but for 2024, 9 is the second most common outcome after 6.\n\nSo, it seems that using either ability is obviously better than using neither.\nBut it's hard to tell whether the 2014 or the 2024 ability is better. It\nprobably depends on our personal loss aversion bias -- **if you really don't\nlike rolling low numbers and want to more consistently reach a minimum value,\nthen the 2024 version is better for you.** However on the other hand,\nwe can see that the 2014 version, we are more likely to roll high values.\n**So if getting a few 1's and 2's is worth it for the times you get 10's, 11's,\nand 12's, the 2014 version is for you.**\n\nWe can see this more clearly if we look at the results a bit differently.\n\n## Probability of 'at least' some outcome\n\nSo far we've considered the probability that we roll exactly a specific outcome.\nBut when we're trying to decide which of the two options we prefer, it can\nbe more helpful to look at the **cumulative probabilities**. The cumulative\nprobability $P(X \\leq x)$ can be interpreted as \"the probability that we roll\n*at most* some value $x$\".\n\nFor many people, and certainly for me, it is typically easier to understand\n$P(X \\geq x)$, \"the probability that we roll *at least* some value $x$\". So\nthat lets us answer the question \"is the probability that I roll a 10 or more\nhigher for the 2014 or 2024 GWF ability?\" and other similar questions.\n\nFirst I'll calculate those *at least* probabilities.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresults_cumulative <-\n\tresults_processed |>\n\tdplyr::group_by(which_gwf, weapon) |>\n\tdplyr::mutate(\n\t\tat_most = cumsum(rel_freq),\n\t\tat_least = 1 - at_most + rel_freq\n\t) |>\n\tdplyr::ungroup()\n```\n:::\n\n\n\nNow we can make a plot with the probability we roll a value of $x$ or higher on\nthe y-axis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresults_cumulative |>\n  ggplot() +\n  aes(x = value, y = at_least, color = which_gwf, shape = which_gwf) +\n  geom_point(alpha = 0.75, stroke = 1, size = 3) +\n  geom_line(alpha = 0.75, linewidth = 1) +\n  scale_x_continuous(\n    name = \"Damage result\",\n    breaks = seq(1, 12, 1),\n    minor_breaks = NULL,\n    limits = c(0.5, 12.5)\n  ) +\n  scale_y_continuous(\n    name = \"P(X ≥ x)\",\n    breaks = scales::breaks_pretty(),\n    labels = scales::label_percent()\n  ) +\n  scale_color_brewer(\n    name = \"Rule\",\n    palette = \"Dark2\"\n  ) +\n  scale_shape_manual(\n    name = \"Rule\",\n    values = 15:17\n  ) +\n  facet_wrap(vars(weapon)) +\n  theme_minimal(base_size = 18) +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/at least probability plot-1.png){width=672}\n:::\n:::\n\n\n\nYes, I think this nicely shows my conclusion, although you might disagree with\nme, and that's ok! For both weapons, we can see that the 2024 rules have a\nhigher probability of getting at least some minimum value (3 for 1d12, 6 for\n2d6), but we have a lower probability of rolling at least ANY VALUE above that\nthreshold!\n\n# Conclusions\n\nLet's look at all the summary statistics together in one place.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstat_df <- data.frame(\n  \"Weapon\" = paste0(combos_to_run$k, \"d\", combos_to_run$n),\n  \"Rule\" = factor(\n    combos_to_run$which_gwf,\n    levels = c(\"none\", \"old\", \"new\"),\n    labels = c(\"No GWF\", \"2014 GWF\", \"2024 GWF\")\n  ),\n  \"Expected\" = sapply(results, mean_sd_from_dist)\n)\nknitr::kable(stat_df)\n```\n\n::: {.cell-output-display}\n\n\n|Weapon |Rule     |Expected    |\n|:------|:--------|:-----------|\n|1d12   |No GWF   |6.50 ± 3.45 |\n|1d12   |2014 GWF |7.33 ± 3.00 |\n|1d12   |2024 GWF |6.75 ± 3.11 |\n|2d6    |No GWF   |7.00 ± 2.42 |\n|2d6    |2014 GWF |8.33 ± 2.01 |\n|2d6    |2024 GWF |8.00 ± 1.63 |\n\n\n:::\n:::\n\n\n\nInterestingly, we can see that the 2014 GWF ability gives us the highest\nexpected damage value for both 1d12 and 2d6 weapons. For 2d6 weapons, the 2024\nGWF ability has a tighter SD, indicating that values will also tend to be\nmore consistent in the long run -- more of our rolls will be close to the mean.\nHowever, for 1d12 weapons, the 2024 GWF damage is actually a bit less\nconsistent than the 2014 version! That's probably good, since the mean is\nsubstantially lower than if we look at the contrast for 2d6.\n\nFor me, any guarantees of rolling above a baseline isn't worth losing some\nexpected high rolls, given that the means\nare higher for the 2014 GWF rule than for the 2024 rule. I don't want to\nlose out on that extra damage just for a guarantee that I won't get low\nnumbers!\n\nNotably though, the results are strongly affected by which dice we are rolling.\nLike I said, if your weapon requires you to roll a lot of small dice, like\npotentially a lot of d4's, maybe the 2024 version would come out on top.\nHowever, I expected that as you increase the number of dice, the benefit from\nthe 2014 version will also become more powerful, so maybe the 2024 version\nwould be best for a weapon that does 2d4 or 3d4 damage. I didn't do any\nfurther simulations so I'm not 100% sure right now.\n\nAll of the functions I wrote accept arbitrary integers $n$ and $k$ as arguments\nso in the future I think it would be nice to build a Shiny app or something\nthat allows easy experimentation with that kind of thing, but we'll see if\nthat happens. Anyways, it was nice to think about this problem and convince\nmyself that (by a certain metric made up by me), the 2014 GWF ability is better\nthan the 2024 ability, even if that seems counterintuitive on a first reading\nof both abilities.\n\nIf you got all the way here, thank you for reading this! And please feel free\nto get in touch with me if you have questions about D&D dice problems.\n\n## Code {.appendix}\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Enumeration.R\"}\n###\n# Probabilities of GWF damage by enumeration\n# Zane\n# 2024-09-22\n###\n\n# Probabilities for old GWF\ncreate_die_matrix <- function(values, k) {\n\tperms <-\n\t\trep(values, times = k) |>\n\t\tmatrix(nrow = length(values), ncol = k) |>\n\t\tas.data.frame() |>\n\t\texpand.grid()\n\t\n\tcolnames(perms) <- paste0(\"X\", 1:ncol(perms))\n\t\n\treturn(perms)\n}\n\ndie_from_method <- function(which_gwf, n) {\n\tif (which_gwf == \"none\") {\n\t\tdie <- seq(1, n, 1)\n\t} else if (which_gwf == \"old\") {\n\t\tdie <- c(\n\t\t\trep(c(1, 2), each = 2),\n\t\t\trep(seq(3, n), each = n + 2)\n\t\t)\n\t} else if (which_gwf == \"new\") {\n\t\tdie <- c(3, 3, seq(3, n, 1))\n\t} else {\n\t\tstop(\"'which_gwf' should be one of: 'none', 'old', or 'new'.\")\n\t}\n\t\n\treturn(die)\n}\n\nget_distribution <- function(\n\t\tn, k, which_gwf, return_args = TRUE, digits = 4, pct = FALSE\n\t) {\n\tdie <- die_from_method(which_gwf, n)\n\tdie_matrix <- create_die_matrix(die, k)\n\tdamage_values <- rowSums(die_matrix)\n\tdamage_distribution <- table(damage_values, dnn = NULL)\n\tdamage_distribution_rel <- prop.table(damage_distribution)\n\t\n\ttidy_output <- data.frame(\n\t\tvalue = as.integer(names(damage_distribution)),\n\t\tfreq = as.integer(damage_distribution)\n\t)\n\t\n\tmult <- ifelse(isTRUE(pct), 100, 1)\n\ttidy_output$rel_freq <- round(\n\t\tas.numeric(damage_distribution_rel) * mult,\n\t\tdigits = ifelse(isTRUE(pct), digits - 2, digits)\n\t)\n\t\n\tif (isTRUE(return_args)) {\n\t\ttidy_output$n <- n\n\t\ttidy_output$k <- k\n\t\ttidy_output$which_gwf <- which_gwf\n\t}\n\t\n\treturn(tidy_output)\n}\n\nmean_sd_from_dist <- function(dist_res, format = TRUE, pct_input = FALSE) {\n\tmult <- ifelse(isTRUE(pct_input), 0.01, 1)\n\tx <- dist_res$value\n\twt <- dist_res$rel_freq * mult\n\twm <- sum(x * wt)\n\twv <- sum(wt * (x - wm)^2)\n\twsd <- sqrt(wv)\n\t\n\tif (isTRUE(format)) {\n\t\tout <- sprintf(\"%.2f ± %.2f\", wm, wsd)\n\t} else {\n\t\tout <- c(\"mean\" = wm, \"sd\" = wsd)\n\t}\n\t\n\treturn(out)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Simulation.R\"}\n###\n# Simulating GWF damage\n# Zane\n# 2024-09-22\n###\n\nN_sims <- 1e6\n\nvalidate_args_as_integer <- function(...) {\n\tmc <- match.call(expand.dots = FALSE)\n\tdots <- list(...)\n\tnames(dots) <- mc$...\n\t\n\tfor (i in seq_along(dots)) {\n\t\tit <- dots[[i]]\n\t\tit_name <- names(dots)[[i]]\n\t\tif (!is.numeric(it) || (it < 1) || (it %% 1 != 0)) {\n\t\t\tstop(it_name, \" should be an integer ≥ 1\")\n\t\t}\n\t}\n\t\n\tinvisible(TRUE)\n}\n\n# Old method\nsimulation_old_gwf <- function(n, k, n_sims) {\n\t\n\tvalidate_args_as_integer(n, k, n_sims)\n\t\n\tone_die <- function() {\n\t\tresult <- sample.int(n, size = n_sims, replace = TRUE)\n\t\trerolls <- (result %in% c(1, 2))\n\t\tresult[rerolls] <- sample.int(n, size = sum(rerolls), replace = TRUE)\n\t\treturn(result)\n\t}\n\t\n\tsim_dice <-\n\t\tlapply(1:k, \\(x) one_die()) |> \n\t\tsimplify2array(except = NULL)\n\t\n\tdamage <- rowSums(sim_dice)\n\t\n\treturn(damage)\n}\n\nset.seed(375)\nold_sim <- simulation_old_gwf(6, 2, 1e6)\nold_sim_counts <- old_sim |> table()\nold_sim_props <- old_sim_counts |> prop.table()\nbarplot(old_sim_props)\n\n# New method\n\nsimulation_new_gwf <- function(n, k, n_sims) {\n\t\n\tvalidate_args_as_integer(n, k, n_sims)\n\t\n\tone_die <- function() {\n\t\tresult <- sample.int(n, size = n_sims, replace = TRUE)\n\t\tresult[result < 3] <- 3\n\t\treturn(result)\n\t}\n\t\n\tsim_dice <-\n\t\tlapply(1:k, \\(x) one_die()) |> \n\t\tsimplify2array(except = NULL)\n\t\n\tdamage <- rowSums(sim_dice)\n\t\n\treturn(damage)\n}\n\nset.seed(375)\nnew_sim <- simulation_new_gwf(6, 2, 1e6)\nnew_sim_counts <- new_sim |> table()\nnew_sim_props <- new_sim_counts |> prop.table()\nbarplot(new_sim_props)\n```\n:::\n\n\n\n\n## Details {.appendix}\n\n* Another common tactic I use for this types of problems, which I call the\nlazy way, is just to write a simulation that replicates the behavior of\ninterest a million times and look at the empirical probabilities. This is often\na great strategy, but for this example the analytical computation is simple\nenough that it's not worth doing a simulation. However, the more dice you\nstart rolling, the more RAM it takes to enumerate combinations and the more\nworthwhile it becomes to just do a simulation. You can see my example simulation\ncode in the code links.\n* A much simpler way to do this is to use the specialized web app\n[AnyDice](https://anydice.com/) by [Jasper Flick]().\nImplementing [an AnyDice program](https://anydice.com/program/38e70) for this\ncomparison takes only 3 lines of code, although I've modified this so that\n$n$, the number of faces on the dice, and $k$, the number of dice to roll,\nare variables that you can easily change all at once.\n* Information from the Player's Handbook is not owned by me, and is included here\nunder fair use for educational purposes (although it seems prudent to mention\nthat all of the information included here is also licensed under the\n[Open Game License Version 1.0a](https://opengamingfoundation.org/ogl.html)\nand is included in the Basic Rules). The CC-BY-NC-SA licensed under which my\ncontent is not distributed does not extend to information which is owned by\nWizards of the Coast or Hasbro.\n* This document was last updated at 2024-09-23 00:16:56.274673. The complete `R` session\ninformation is reproduced below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessioninfo::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/New_York\n date     2024-09-23\n pandoc   3.1.1 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package      * version date (UTC) lib source\n cli            3.6.3   2024-06-21 [1] CRAN (R 4.4.1)\n colorspace     2.1-0   2023-01-23 [1] CRAN (R 4.4.1)\n digest         0.6.36  2024-06-23 [1] CRAN (R 4.4.1)\n dplyr          1.1.4   2023-11-17 [1] CRAN (R 4.4.1)\n evaluate       0.24.0  2024-06-10 [1] CRAN (R 4.4.1)\n fansi          1.0.6   2023-12-08 [1] CRAN (R 4.4.1)\n farver         2.1.2   2024-05-13 [1] CRAN (R 4.4.1)\n fastmap        1.2.0   2024-05-15 [1] CRAN (R 4.4.1)\n generics       0.1.3   2022-07-05 [1] CRAN (R 4.4.1)\n ggplot2      * 3.5.1   2024-04-23 [1] CRAN (R 4.4.1)\n glue           1.7.0   2024-01-09 [1] CRAN (R 4.4.1)\n gtable         0.3.5   2024-04-22 [1] CRAN (R 4.4.1)\n here           1.0.1   2020-12-13 [1] CRAN (R 4.4.1)\n htmltools      0.5.8.1 2024-04-04 [1] CRAN (R 4.4.1)\n jsonlite       1.8.8   2023-12-04 [1] CRAN (R 4.4.1)\n knitr          1.48    2024-07-07 [1] RSPM\n lifecycle      1.0.4   2023-11-07 [1] CRAN (R 4.4.1)\n magrittr       2.0.3   2022-03-30 [1] CRAN (R 4.4.1)\n munsell        0.5.1   2024-04-01 [1] CRAN (R 4.4.1)\n pillar         1.9.0   2023-03-22 [1] CRAN (R 4.4.1)\n pkgconfig      2.0.3   2019-09-22 [1] CRAN (R 4.4.1)\n R6             2.5.1   2021-08-19 [1] CRAN (R 4.4.1)\n RColorBrewer   1.1-3   2022-04-03 [1] CRAN (R 4.4.0)\n renv           1.0.7   2024-04-11 [1] CRAN (R 4.4.1)\n rlang          1.1.4   2024-06-04 [1] CRAN (R 4.4.1)\n rmarkdown      2.27    2024-05-17 [1] CRAN (R 4.4.1)\n rprojroot      2.0.4   2023-11-05 [1] CRAN (R 4.4.1)\n rstudioapi     0.16.0  2024-03-24 [1] CRAN (R 4.4.1)\n scales         1.3.0   2023-11-28 [1] CRAN (R 4.4.1)\n sessioninfo    1.2.2   2021-12-06 [1] CRAN (R 4.4.1)\n tibble         3.2.1   2023-03-20 [1] CRAN (R 4.4.1)\n tidyselect     1.2.1   2024-03-11 [1] CRAN (R 4.4.1)\n utf8           1.2.4   2023-10-22 [1] CRAN (R 4.4.1)\n vctrs          0.6.5   2023-12-01 [1] CRAN (R 4.4.1)\n withr          3.0.0   2024-01-16 [1] CRAN (R 4.4.1)\n xfun           0.45    2024-06-16 [1] CRAN (R 4.4.1)\n yaml           2.3.9   2024-07-05 [1] RSPM\n\n [1] D:/proj/quarto-website/renv/library/windows/R-4.4/x86_64-w64-mingw32\n [2] C:/Users/Zane/AppData/Local/R/cache/R/renv/sandbox/windows/R-4.4/x86_64-w64-mingw32/e0da0d43\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n\n<!-- END OF FILE -->\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}