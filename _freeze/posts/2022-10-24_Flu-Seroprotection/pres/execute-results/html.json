{
  "hash": "c80c294f96ac737f03e9fe6853373bac",
  "result": {
    "markdown": "---\ntitle: \"IDIG 2022-10-24\"\nauthor: \"Zane (https://wzbillings.com)\"\nformat:\n  revealjs:\n    toc: false\n---\n\n\n\n> Nauta JJ, Beyer WE, Osterhaus AD. On the relationship between mean antibody level, seroprotection and clinical protection from influenza. Biologicals. 2009;37(4):216-221. doi:10.1016/j.biologicals.2009.02.002.\n\n## Intro\n\nblah\n\n## Definitions\n\ntext\n\n::: {.smaller}\n## The model {.scrollable}\n\n\\begin{align*}\nt &= \\log_2 \\left( \\mathrm{HAI \\ titer} / 5 \\right) \\\\\nt &\\sim \\mathrm{Normal}(\\mu, \\sigma) \\\\\n\\pi_{\\mathrm{seroprotected}} &= \\int_{t_p}^\\infty \\ f(t) \\ \\mathrm{d}t \\\\\n\\pi_{\\mathrm{seroconverted}} &= \\int_{-\\infty}^\\infty \\ f(t) \\frac{\\lambda}{\\left(1 + \\exp\\left(\\alpha + \\beta t\\right)\\right) \\ \\mathrm{d}t} \\\\\n\\end{align*}\n\n* $0 < \\lambda \\leq 1, \\ \\alpha > 0, \\beta < 0$\n* $\\lambda$ is the probability of clinical protection for subjects with \"a very high HI titer\".\n* $\\alpha$ accounts for protection unrelated to antibody level.\n* $\\beta$ is the slope of the clinical protection curve.\n* $\\displaystyle\\frac{\\lambda}{\\left(1 + \\exp\\left(\\alpha + \\beta \\ \\mathbf{t_p} \\right)\\right)} = 0.5$.\n* Can alternatively specify the value of $t_p$ instead of $\\beta$ (if all other parameters are also specified).\n:::\n\n## What does that mean?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- seq(0, 10, 0.01)\nalpha <- 3\nbeta <- -1\nlambda <- 1\nt <- dnorm(x, 5, 1.5)\ny <- lambda / (1 + exp(alpha + beta * x))\ntp <- x[which.min(abs(y - 0.5))]\n\nplot(NULL, xlim = c(0, 9), ylim = c(0, 1), xlab = \"t\",\n\t ylab = \"probability density\",\n\t xaxs = \"i\", yaxs = \"i\", cex.axis = 1.3, cex.lab = 1.3)\n\npolygon(c(tp, x[x >= tp]), c(0, t[x >= tp]), col = \"gray\")\nlines(x = x, y = t)\nlines(x = x, y = y)\n\n# Lines pointing out 0.5 threshold\nsegments(tp, 0, tp, 0.5, lty = 2)\nsegments(-1000, 0.5, tp, 0.5, lty = 2)\n\n# Horizontal line\nsegments(3.5, 0.28, 6.5, 0.28)\n\n# Wagaman reference lines\nsegments(3.5, 0.27, 3.5, 0.29)\nsegments(5.0, 0.27, 5.0, 0.29)\nsegments(6.5, 0.27, 6.5, 0.29)\n\n# Text labels\npar(cex = 1.5)\ntext(x = 8, y = 0.96, labels = expression(\"f\"[2]*\"(t)\"))\ntext(x = 8.16, y = 0.07, labels = expression(\"f\"[1]*\"(t)\"))\ntext(x = 5, y = 0.32, labels = expression(mu))\ntext(x = 4.25, y = 0.32, labels = expression(\"-\"*sigma))\ntext(x = 5.75, y = 0.32, labels = expression(\"+\"*sigma))\n```\n\n::: {.cell-output-display}\n![](pres_files/figure-revealjs/unnamed-chunk-1-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(\n\tx,\n\tt * y,\n\txlab = \"t\",\n\tylab = expression(\"f\"[1]*\" f\"[2]),\n\ttype = \"l\"\n)\nlines(x, t)\n```\n\n::: {.cell-output-display}\n![](pres_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n",
    "supporting": [
      "pres_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}